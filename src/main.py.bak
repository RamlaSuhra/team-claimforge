# main.py - backup. outputs to src/logs
import os
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
import google.generativeai as genai
from agent.GeminiPatentAgent import GeminiPatentAgent

# --- Configuration ---
# Get your API key from environment variables or secure storage
#os.environ['GOOGLE_API_KEY'] = 

# Load .env from project root
env_path = Path(__file__).resolve().parent.parent / ".env"
load_dotenv(dotenv_path=env_path)

# Get API key
api_key = os.getenv("GEMINI_API_KEY") or os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise EnvironmentError(" GEMINI_API_KEY not found in .env")

genai.configure(api_key=api_key)
# Using a text-focused model suitable for this task
model = genai.GenerativeModel('gemini-1.5-flash')

def read_invention_disclosure(file_path: str):
    """Reads the invention disclosure from a file."""
    try:
        with open(file_path, 'r') as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: Invention disclosure file not found at '{file_path}'")
        return None

if __name__ == "__main__":
    # 1. Receive User Input (by reading the file)
    invention_file = "invention_disclosure.txt"
    invention_details = read_invention_disclosure(invention_file)

    if invention_details:
        # 2. Initialize and Run the Agent
        patent_agent = GeminiPatentAgent(model=model)
        final_response = patent_agent.run(user_input=invention_details)

        # 5. Print the Final Response
        print("\n======================================================")
        print("===        FINAL PATENTABILITY ANALYSIS        ===")
        print("======================================================")
        print(final_response)

        # Save to logs/
        logs_dir = Path(__file__).resolve().parent / "logs"
        logs_dir.mkdir(parents=True, exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = logs_dir / f"gemini_output_{timestamp}.txt"

        with open(log_file, "w", encoding="utf-8") as f:
            f.write(f"Final responses:\n\nResponse:\n{final_response}")

        print(f"[LOGGED] Response saved to {log_file}")
